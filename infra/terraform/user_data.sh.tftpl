#!/bin/bash
set -euxo pipefail

# Clean any old NGINX
if command -v systemctl >/dev/null 2>&1; then
  systemctl stop nginx || true
  systemctl disable nginx || true
fi
dnf -y remove nginx || true
rm -f /etc/nginx/conf.d/app.conf || true

# Install runtime deps
dnf -y update
dnf -y install docker awscli curl
systemctl enable --now docker

# Inputs from Terraform
AWS_REGION="${aws_region}"
APP_PORT="${app_port}"
ECR_REPO="${backend_ecr_repo}"
IMAGE_TAG="${image_tag}"

# ECR login & pull
aws ecr get-login-password --region "$AWS_REGION" \
  | docker login --username AWS --password-stdin "$ECR_REPO"
docker pull "$ECR_REPO:$IMAGE_TAG" || true

# Try common internal ports: same-as-external, 3000, 8080, 80
CANDIDATES="$APP_PORT 3000 8080 80"

docker rm -f app || true
for INTERNAL in $CANDIDATES; do
  # run with candidate internal port
  docker rm -f app || true
  docker run -d --name app \
    -p "$APP_PORT:$INTERNAL" \
    --restart unless-stopped \
    -e PORT="$INTERNAL" \
    "$ECR_REPO:$IMAGE_TAG" || true

  # wait for readiness
  ok=0
  for i in $(seq 1 20); do
    sleep 2
    if curl -fsS "http://localhost:$APP_PORT" >/dev/null; then
      ok=1; break
    fi
  done

  if [ "$ok" -eq 1 ]; then
    echo "App is UP on external :$APP_PORT -> container :$INTERNAL"
    break
  fi
done

# Final state dump
docker ps
