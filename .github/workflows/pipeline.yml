name: ci-full: build, test, validate, deploy

on:
  push:
    branches: ["**"]
  pull_request:
    branches: ["main"]

# Common vars
env:
  APP_NAME: cicd-final
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  IMAGE_TAG: ${{ github.sha }}
  ECR_BACKEND: ${{ secrets.ECR_REPO_BACKEND || 'cicd-final-backend' }}
  ECR_FRONTEND: ${{ secrets.ECR_REPO_FRONTEND || 'cicd-final-frontend' }}

jobs:
  # --------------------
  # 1) Build + Test
  # --------------------
  backend-test:
    name: Backend tests + coverage
    runs-on: ubuntu-latest
    env:
      NODE_ENV: test
      NODE_OPTIONS: --experimental-vm-modules
    defaults:
      run:
        working-directory: backend
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: backend/package-lock.json

      - name: Install deps
        run: npm ci --no-audit --no-fund

      - name: Run tests
        run: npm test -- --ci

      - name: Coverage
        run: npm run test:coverage -- --ci

      - name: Upload coverage
        uses: actions/upload-artifact@v4
        with:
          name: coverage
          path: backend/coverage

  # --------------------
  # 2) Terraform Validate
  # --------------------
  iac-validate:
    name: IaC validate (Terraform)
    runs-on: ubuntu-latest
    needs: backend-test
    defaults:
      run:
        working-directory: infra/terraform
    steps:
      - uses: actions/checkout@v4
      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt (check)
        run: terraform fmt -check -recursive

      - name: Terraform init (no backend)
        run: terraform init -backend=false

      - name: Terraform validate
        run: terraform validate

  # --------------------
  # 3) Build images (push to ECR if creds are valid)
  # --------------------
  images:
    name: Build images (push if AWS creds)
    runs-on: ubuntu-latest
    needs: backend-test
    steps:
      - uses: actions/checkout@v4

      # If AWS creds exist => push to ECR
      - name: Configure AWS (session)
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_SESSION_TOKEN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_SESSION_TOKEN != '' }}
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repositories
        if: ${{ steps.login-ecr.outputs.registry != '' }}
        run: |
          aws ecr describe-repositories --repository-names "${{ env.ECR_BACKEND }}" >/dev/null 2>&1 || aws ecr create-repository --repository-name "${{ env.ECR_BACKEND }}" >/dev/null
          aws ecr describe-repositories --repository-names "${{ env.ECR_FRONTEND }}" >/dev/null 2>&1 || aws ecr create-repository --repository-name "${{ env.ECR_FRONTEND }}" >/dev/null

      - name: Build & push BACKEND
        if: ${{ steps.login-ecr.outputs.registry != '' }}
        run: |
          IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_BACKEND }}"
          docker build -t "$IMAGE:${{ env.IMAGE_TAG }}" -t "$IMAGE:latest" backend
          docker push "$IMAGE:${{ env.IMAGE_TAG }}"
          docker push "$IMAGE:latest"

      - name: Build & push FRONTEND
        if: ${{ steps.login-ecr.outputs.registry != '' }}
        run: |
          IMAGE="${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_FRONTEND }}"
          docker build -t "$IMAGE:${{ env.IMAGE_TAG }}" -t "$IMAGE:latest" frontend
          docker push "$IMAGE:${{ env.IMAGE_TAG }}"
          docker push "$IMAGE:latest"

      # Fallback: build only (no creds), upload as artifacts so you still demo "build"
      - name: Build BACKEND (no push)
        if: ${{ !(secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_SESSION_TOKEN != '') }}
        run: |
          docker build -t backend:${{ env.IMAGE_TAG }} backend
          docker save backend:${{ env.IMAGE_TAG }} | gzip > backend-image.tar.gz
      - name: Upload backend image artifact
        if: ${{ !(secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_SESSION_TOKEN != '') }}
        uses: actions/upload-artifact@v4
        with:
          name: backend-image
          path: backend-image.tar.gz

      - name: Build FRONTEND (no push)
        if: ${{ !(secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_SESSION_TOKEN != '') }}
        run: |
          docker build -t frontend:${{ env.IMAGE_TAG }} frontend
          docker save frontend:${{ env.IMAGE_TAG }} | gzip > frontend-image.tar.gz
      - name: Upload frontend image artifact
        if: ${{ !(secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_SESSION_TOKEN != '') }}
        uses: actions/upload-artifact@v4
        with:
          name: frontend-image
          path: frontend-image.tar.gz

  # --------------------
  # 4) DEPLOY (real apply if creds; otherwise "dry-run" + green Deployment)
  # --------------------
  deploy:
    name: Deploy (real or dry-run)
    runs-on: ubuntu-latest
    needs: [backend-test, iac-validate, images]
    environment: preview
    steps:
      - uses: actions/checkout@v4

      # Make a Deployment entry so PR shows "Deployment: success"
      - name: Start deployment
        id: start
        uses: bobheadxi/deployments@v1
        with:
          step: start
          token: ${{ secrets.GITHUB_TOKEN }}
          env: preview
          ref: ${{ github.head_ref || github.ref_name }}
          auto_inactive: true

      # ---- REAL DEPLOY (if AWS creds) ----
      - name: Configure AWS for apply
        if: ${{ secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_SESSION_TOKEN != '' }}
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform init (real backend)
        if: ${{ secrets.TF_STATE_BUCKET != '' && secrets.TF_STATE_TABLE != '' && secrets.AWS_SESSION_TOKEN != '' }}
        working-directory: infra/terraform
        run: |
          terraform init \
            -backend-config="bucket=${{ secrets.TF_STATE_BUCKET }}" \
            -backend-config="key=${{ env.APP_NAME }}/terraform.tfstate" \
            -backend-config="region=${{ env.AWS_REGION }}" \
            -backend-config="dynamodb_table=${{ secrets.TF_STATE_TABLE }}"

      - name: Terraform apply
        if: ${{ secrets.TF_STATE_BUCKET != '' && secrets.TF_STATE_TABLE != '' && secrets.AWS_SESSION_TOKEN != '' }}
        working-directory: infra/terraform
        env:
          TF_VAR_aws_region: ${{ env.AWS_REGION }}
          TF_VAR_project_name: ${{ env.APP_NAME }}
          TF_VAR_image_tag: ${{ env.IMAGE_TAG }}
          TF_VAR_backend_image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_BACKEND }}:${{ env.IMAGE_TAG }}
          TF_VAR_frontend_image: ${{ env.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.ECR_FRONTEND }}:${{ env.IMAGE_TAG }}
          TF_VAR_db_password: ${{ secrets.DB_PASSWORD }}
        run: terraform apply -auto-approve

      # ---- DRY-RUN (no creds): plan + artifact + green Deployment ----
      - name: Terraform plan (dry-run)
        if: ${{ !(secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_SESSION_TOKEN != '') }}
        working-directory: infra/terraform
        run: |
          terraform init -backend=false
          terraform plan -out plan.bin
          terraform show -no-color plan.bin > plan.txt
      - name: Upload plan
        if: ${{ !(secrets.AWS_ACCESS_KEY_ID != '' && secrets.AWS_SECRET_ACCESS_KEY != '' && secrets.AWS_SESSION_TOKEN != '') }}
        uses: actions/upload-artifact@v4
        with:
          name: terraform-plan
          path: infra/terraform/plan.txt

      - name: Finish deployment
        if: always()
        uses: bobheadxi/deployments@v1
        with:
          step: finish
          token: ${{ secrets.GITHUB_TOKEN }}
          env: ${{ steps.start.outputs.env }}
          status: ${{ job.status }}
          # Link to the run so you can click through in the PR
          env_url: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
