name: CI/CD (App â†’ ECR â†’ Terraform/EC2)

on:
  push:
    branches: [ "main" ]

concurrency:
  group: cicd-finalproject
  cancel-in-progress: true

permissions:
  id-token: write
  contents: read

env:
  AWS_REGION: ${{ secrets.AWS_REGION }}
  AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
  ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
  BACKEND_REPO: cicd-final-backend
  FRONTEND_REPO: cicd-final-frontend
  IMAGE_TAG: latest

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install backend deps
        run: |
          cd backend
          npm ci
      - name: Run backend tests (with coverage)
        run: |
          cd backend
          npm test -- --coverage
      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/

  build-and-push:
    runs-on: ubuntu-latest
    needs: test-backend
    outputs:
      backend_image: ${{ steps.push_backend.outputs.image }}
      frontend_image: ${{ steps.push_frontend.outputs.image }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:            ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Ensure ECR repositories exist
        run: |
          set -euo pipefail
          for REPO in "${BACKEND_REPO}" "${FRONTEND_REPO}"; do
            aws ecr describe-repositories --repository-names "$REPO" --region "$AWS_REGION" >/dev/null 2>&1 \
              || aws ecr create-repository --repository-name "$REPO" --region "$AWS_REGION" >/dev/null
          done

      - name: Build & push BACKEND
        id: push_backend
        run: |
          set -euxo pipefail
          BACKEND_URI="${ECR_REGISTRY}/${BACKEND_REPO}:${IMAGE_TAG}"
          docker build -t "${BACKEND_URI}" ./backend
          docker push "${BACKEND_URI}"
          echo "image=${BACKEND_URI}" >> "$GITHUB_OUTPUT"

      - name: Build & push FRONTEND
        id: push_frontend
        run: |
          set -euxo pipefail
          FRONTEND_URI="${ECR_REGISTRY}/${FRONTEND_REPO}:${IMAGE_TAG}"
          docker build -t "${FRONTEND_URI}" ./frontend
          docker push "${FRONTEND_URI}"
          echo "image=${FRONTEND_URI}" >> "$GITHUB_OUTPUT"

  terraform-validate:
  runs-on: ubuntu-latest
  needs: build-and-push
  steps:
    - uses: actions/checkout@v4

    - name: Setup Terraform
    uses: hashicorp/setup-terraform@v3
      with:
        terraform_wrapper: false

    - name: Configure AWS credentials (for plan/validate)
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id:     ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region:            ${{ secrets.AWS_REGION }}

    - name: Sanity â€“ who am I
      run: aws sts get-caller-identity

    # ðŸ”§ Auto-format instead of failing on -check
    - name: Terraform fmt (auto-fix)
      run: |
        cd infra/terraform
        terraform fmt -recursive -write=true -diff

    - name: Terraform validate
      run: |
        cd infra/terraform
        terraform init -backend=false -input=false
        terraform validate

    - name: Terraform plan
      env:
        TF_VAR_aws_region: ${{ secrets.AWS_REGION }}
      run: |
        cd infra/terraform
        terraform init -input=false
        terraform plan -no-color -input=false \
          -var "repo_name=${{ env.BACKEND_REPO }}" \
          -var "image_tag=${{ env.IMAGE_TAG }}" \
          -var "aws_region=${{ secrets.AWS_REGION }}"

