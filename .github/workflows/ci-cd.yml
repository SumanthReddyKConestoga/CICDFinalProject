name: CI/CD Pipeline (Backend & Frontend → ECR → Terraform/EC2)

on:
  push:
    branches: [ "main" ]

concurrency:
  group: cicd-finalproject
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  test-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install backend deps
        run: |
          cd backend
          npm ci
      - name: Run backend tests
        run: |
          cd backend
          npm test
      - name: Run backend coverage
        run: |
          cd backend
          npm run test:coverage
      - name: Upload backend coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/

  build-and-push:
    runs-on: ubuntu-latest
    needs: test-backend
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Login to Amazon ECR
        id: ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Ensure ECR repositories exist
        env:
          REGION: ${{ secrets.AWS_REGION }}
          ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          set -euo pipefail
          for REPO in cicd-final-backend cicd-final-frontend; do
            aws ecr describe-repositories --repository-names "$REPO" --region "$REGION" >/dev/null 2>&1 \
              || aws ecr create-repository --repository-name "$REPO" --region "$REGION" >/dev/null
          done
      - name: Build & push backend
        env:
          REGION: ${{ secrets.AWS_REGION }}
          ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          set -euxo pipefail
          BACKEND_URI="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/cicd-final-backend:latest"
          docker build -t "$BACKEND_URI" ./backend
          docker push "$BACKEND_URI"
          echo "BACKEND_IMAGE_URI=${BACKEND_URI%:*}" >> $GITHUB_ENV
      - name: Build & push frontend
        env:
          REGION: ${{ secrets.AWS_REGION }}
          ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
        run: |
          set -euxo pipefail
          FRONTEND_URI="${ACCOUNT_ID}.dkr.ecr.${REGION}.amazonaws.com/cicd-final-frontend:latest"
          docker build -t "$FRONTEND_URI" ./frontend
          docker push "$FRONTEND_URI"
          echo "FRONTEND_IMAGE_URI=${FRONTEND_URI%:*}" >> $GITHUB_ENV

  terraform-validate:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: Export env
        run: echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> $GITHUB_ENV
      - name: Terraform fmt (auto-fix)
        run: |
          cd infra/terraform
          terraform fmt -recursive
      - name: Terraform validate
        run: |
          cd infra/terraform
          terraform init -backend=false -input=false
          terraform validate
      - name: Terraform plan
        run: |
          cd infra/terraform
          terraform init -input=false
          terraform plan -no-color -input=false

  deploy-ec2:
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_wrapper: false
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
      - name: Terraform apply
        env:
          TF_VAR_backend_ecr_repo: ${{ env.BACKEND_IMAGE_URI }}
          TF_VAR_frontend_ecr_repo: ${{ env.FRONTEND_IMAGE_URI }}
          TF_VAR_image_tag: latest
        run: |
          cd infra/terraform
          terraform init
          terraform apply -auto-approve
