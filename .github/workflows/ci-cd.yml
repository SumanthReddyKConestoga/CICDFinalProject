name: CI/CD Pipeline

on:
  push:
    branches: [main, feature/*]
  pull_request:
    branches: [main]

jobs:
  scan:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install Trivy
        run: |
          sudo apt-get install wget -y
          wget https://github.com/aquasecurity/trivy/releases/latest/download/trivy_0.50.0_Linux-64bit.deb
          sudo dpkg -i trivy_0.50.0_Linux-64bit.deb
      - name: Docker Build (Backend)
        run: docker build -t backend:latest ./backend
      - name: Docker Build (Frontend)
        run: docker build -t frontend:latest ./frontend
      - name: Trivy Scan Backend
        run: trivy image backend:latest
      - name: Trivy Scan Frontend
        run: trivy image frontend:latest

  build-test:
    runs-on: ubuntu-latest
    needs: scan
    steps:
      - uses: actions/checkout@v4
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
      - name: Install dependencies (backend)
        run: |
          cd backend
          npm ci
      - name: Run backend tests
        run: |
          cd backend
          npm test -- --coverage
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage/

  terraform-validate:
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - uses: actions/checkout@v4
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Format
        run: terraform fmt -check -recursive
      - name: Terraform Validate
        run: terraform validate
      - name: Terraform Plan
        run: |
          cd infra/terraform
          terraform init
          terraform plan

  deploy:
    runs-on: ubuntu-latest
    needs: terraform-validate
    steps:
      - uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build and push frontend Docker image
        run: |
          FRONTEND_REPO=${{ secrets.ECR_REPO_URL }}-frontend
          docker build -t $FRONTEND_REPO:latest ./frontend
          docker push $FRONTEND_REPO:latest
      - name: Build and push backend Docker image
        run: |
          BACKEND_REPO=${{ secrets.ECR_REPO_URL }}-backend
          docker build -t $BACKEND_REPO:latest ./backend
          docker push $BACKEND_REPO:latest
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      - name: Terraform Apply
        run: |
          cd infra/terraform
          terraform init
          terraform apply -auto-approve
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
